# encoding: utf-8
import logging
from south.v2 import DataMigration
from django.conf import settings
from dimagi.utils.couch.database import iter_docs
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe
from corehq.apps.app_manager.const import APP_V1
from corehq.apps.app_manager.detail_screen import get_column_xpath_generator
from corehq.apps.app_manager.models import Application
from corehq.apps.app_manager.xpath import dot_interpolate

logger = logging.getLogger(__name__)


class Migration(DataMigration):

    def forwards(self, orm):
        if not settings.UNIT_TESTING:
            application_ids = {r['id'] for r in Application.get_db().view(
                'app_manager/applications',
                reduce=False,
            ).all()}

            for app_doc in iter_docs(Application.get_db(), application_ids):

                if app_doc["doc_type"] in ["Application", "Application-Deleted"]:
                    application = Application.wrap(app_doc)
                    self.migrate_app(application)

    @classmethod
    def migrate_app(cls, app):
        filter_combination_func = cls.combine_and_interpolate_V2_filters
        if app.application_version == APP_V1:
            filter_combination_func = \
                cls.combine_and_interpolate_V1_filters

        for module in app.get_modules():
            detail = module.case_details.short
            combined_filter_string = filter_combination_func(
                detail.get_columns(), app, module, detail
            )
            detail.filter = combined_filter_string

        app.save()
        logger.info("Filter migration on app {id} complete.".format(id=app.id))

    @classmethod
    def combine_and_interpolate_V1_filters(cls, columns, app, module, detail):
        """
        Return a single filter xpath generated by ANDing together the given
        componenets. Also replaces "."s with the corresponding xpath. The
        interpolation here is specific to v1 apps! use
        combine_and_interpolate_V2_filters for V2 apps.
        :param column_filters: A list of columns
        :param app:
        :param module:
        :param detail:
        :return:
        """
        filters = []
        for i, column in enumerate(columns):
            if column.format == 'filter':
                value = dot_interpolate(
                    column.filter_xpath,
                    '%s_%s_%s' % (column.model, column.field, i + 1)
                )
                filters.append("(%s)" % value)
        xpath = ' and '.join(filters)
        return cls.partial_escape(xpath)

    @classmethod
    def partial_escape(cls, xpath):
        """
        Copied from http://stackoverflow.com/questions/275174/how-do-i-perform-html-decoding-encoding-using-python-django
        but without replacing the single quote
        """
        return mark_safe(
            force_unicode(xpath).replace(
                '&', '&amp;'
            ).replace(
                '<', '&lt;'
            ).replace(
                '>', '&gt;'
            ).replace(
                '"', '&quot;'
            )
        )

    @classmethod
    def combine_and_interpolate_V2_filters(cls, columns, app, module, detail):
        """
        Return a single filter xpath generated by ANDing together the given
        componenets. Also replaces "."s with the corresponding xpath.
        The interpolation here is specific to v2 apps! use
        combine_and_interpolate_V1_filters for V1 apps.
        :param column_filters: A list of columns
        :param app:
        :param module:
        :param detail:
        :return:
        """
        interpolated_filters = []
        for column in columns:
            if column.format == "filter":
                # filters might have a "." in them like: . = "VT"
                # We need to replace these dots with the names of the
                # properties that they refer to.
                #
                # So, if we had a case property called "state", the filter
                # xpath would be converted to: state = "VT"

                # The string that will replace "."s
                replacer_xpath = get_column_xpath_generator(
                    app, module, detail, column
                ).xpath

                # The filter with "."s replaced
                interpolated_xpath = dot_interpolate(
                    column.filter_xpath, replacer_xpath
                )

                interpolated_filters.append(interpolated_xpath)

        combined_filter = ' and '.join(
            '(%s)' % f for f in interpolated_filters
        )

        return combined_filter

    def backwards(self, orm):
        pass

    models = {}
    complete_apps = ['app_manager']
